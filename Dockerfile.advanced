# Dockerfile.advanced - World-Class Daily Noah Container
"""
ðŸš€ DAILY NOAH ADVANCED DOCKERFILE
The most sophisticated containerization for the world's most advanced AI briefing system.

Features:
- Multi-stage build for optimization
- Security hardening
- Performance optimization
- Health checks
- Advanced monitoring
- Production-ready configuration
"""

# ============================================================================
# MULTI-STAGE BUILD
# ============================================================================

# Stage 1: Build stage
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    make \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements_advanced.txt .
RUN pip install --upgrade pip && \
    pip install -r requirements_advanced.txt

# ============================================================================
# Stage 2: Production stage
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH" \
    NOAH_ENV=production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    # Audio processing
    ffmpeg \
    # System utilities
    curl \
    wget \
    # Security
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r noah && useradd -r -g noah noah

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Create application directory
WORKDIR /app

# Copy application code
COPY noah_core_advanced.py .
COPY server_advanced.py .
COPY app_advanced.py .

# Create necessary directories
RUN mkdir -p /app/audio /app/logs /app/cache && \
    chown -R noah:noah /app

# Switch to non-root user
USER noah

# Expose ports
EXPOSE 8000 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["uvicorn", "server_advanced:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]
