# Dockerfile.enterprise - Enterprise-Grade Docker Configuration for Daily Noah
"""
ðŸš€ DAILY NOAH ENTERPRISE DOCKERFILE
The most advanced AI briefing system container.

Features:
- Multi-stage build for optimization
- Security hardening
- Performance optimization
- Health checks
- Monitoring integration
- Enterprise-grade base image
- Optimized for production
"""

# ============================================================================
# MULTI-STAGE BUILD
# ============================================================================

# Stage 1: Base image with system dependencies
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Essential build tools
    build-essential \
    gcc \
    g++ \
    make \
    cmake \
    pkg-config \
    # Audio processing
    ffmpeg \
    libsndfile1 \
    libasound2-dev \
    portaudio19-dev \
    # Image processing
    libopencv-dev \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    # Network tools
    curl \
    wget \
    # Security tools
    ca-certificates \
    gnupg \
    lsb-release \
    # Monitoring tools
    htop \
    iotop \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Stage 2: Python dependencies
FROM base as python-deps

# Create non-root user
RUN groupadd -r noah && useradd -r -g noah noah

# Set working directory
WORKDIR /app

# Copy requirements
COPY requirements_enterprise.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements_enterprise.txt

# Stage 3: Application
FROM python-deps as app

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/audio /app/logs /app/cache /app/tmp \
    && chown -R noah:noah /app

# Set permissions
RUN chmod +x /app/entrypoint.sh

# Switch to non-root user
USER noah

# Expose ports
EXPOSE 8000 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["/app/entrypoint.sh"]

# ============================================================================
# ENTERPRISE CONFIGURATION
# ============================================================================

# Labels for metadata
LABEL maintainer="Daily Noah Enterprise Team" \
      version="3.0.0" \
      description="Enterprise-grade AI briefing generation system" \
      org.opencontainers.image.title="Daily Noah Enterprise" \
      org.opencontainers.image.description="The world's most advanced AI briefing system" \
      org.opencontainers.image.version="3.0.0" \
      org.opencontainers.image.authors="Daily Noah Team" \
      org.opencontainers.image.url="https://dailynoah.com" \
      org.opencontainers.image.source="https://github.com/dailynoah/enterprise" \
      org.opencontainers.image.licenses="MIT"

# ============================================================================
# SECURITY HARDENING
# ============================================================================

# Remove unnecessary packages
RUN apt-get remove -y \
    build-essential \
    gcc \
    g++ \
    make \
    cmake \
    pkg-config \
    && apt-get autoremove -y \
    && apt-get clean

# Set security headers
ENV SECURE_SSL_REDIRECT=1 \
    SECURE_HSTS_SECONDS=31536000 \
    SECURE_HSTS_INCLUDE_SUBDOMAINS=1 \
    SECURE_HSTS_PRELOAD=1 \
    SECURE_CONTENT_TYPE_NOSNIFF=1 \
    SECURE_BROWSER_XSS_FILTER=1 \
    SECURE_REFERRER_POLICY=strict-origin-when-cross-origin

# ============================================================================
# PERFORMANCE OPTIMIZATION
# ============================================================================

# Set Python optimization
ENV PYTHONOPTIMIZE=1 \
    PYTHONHASHSEED=random

# Configure Gunicorn
ENV GUNICORN_WORKERS=4 \
    GUNICORN_WORKER_CLASS=uvicorn.workers.UvicornWorker \
    GUNICORN_WORKER_CONNECTIONS=1000 \
    GUNICORN_MAX_REQUESTS=1000 \
    GUNICORN_MAX_REQUESTS_JITTER=100 \
    GUNICORN_TIMEOUT=30 \
    GUNICORN_KEEPALIVE=2

# ============================================================================
# MONITORING & LOGGING
# ============================================================================

# Configure logging
ENV LOG_LEVEL=INFO \
    LOG_FORMAT=json \
    LOG_FILE=/app/logs/app.log

# Prometheus metrics
ENV ENABLE_METRICS=true \
    METRICS_PORT=9090

# ============================================================================
# ENTERPRISE FEATURES
# ============================================================================

# Redis configuration
ENV REDIS_URL=redis://redis:6379 \
    REDIS_PASSWORD= \
    REDIS_DB=0

# Database configuration
ENV DATABASE_URL=postgresql://noah:password@postgres:5432/noah_enterprise \
    DATABASE_POOL_SIZE=10 \
    DATABASE_MAX_OVERFLOW=20

# Cache configuration
ENV CACHE_TTL=3600 \
    CACHE_MAX_SIZE=1000

# Rate limiting
ENV RATE_LIMIT_REQUESTS=100 \
    RATE_LIMIT_WINDOW=3600

# ============================================================================
# API CONFIGURATION
# ============================================================================

# API keys (should be set via environment variables)
ENV OPENAI_API_KEY= \
    ELEVENLABS_API_KEY= \
    TAVILY_API_KEY=

# API configuration
ENV API_BASE=http://localhost:8000 \
    ALLOWED_ORIGINS=* \
    CORS_ORIGINS=*

# ============================================================================
# FILE STORAGE
# ============================================================================

# Audio storage
ENV AUDIO_DIR=/app/audio \
    MAX_AUDIO_SIZE=52428800 \
    AUDIO_RETENTION_DAYS=7

# Temporary files
ENV TMP_DIR=/app/tmp \
    LOG_DIR=/app/logs \
    CACHE_DIR=/app/cache

# ============================================================================
# ENTERPRISE SETTINGS
# ============================================================================

# Performance settings
ENV MAX_CONCURRENT_GENERATIONS=10 \
    MAX_CONCURRENT_REQUESTS=100 \
    REQUEST_TIMEOUT=30

# Content settings
ENV MAX_ARTICLES_PER_TOPIC=5 \
    MAX_CONTENT_LENGTH=10000 \
    MIN_CONTENT_LENGTH=500

# Analytics
ENV ENABLE_ANALYTICS=true \
    ANALYTICS_RETENTION_DAYS=90

# ============================================================================
# VOLUMES
# ============================================================================

# Persistent volumes
VOLUME ["/app/audio", "/app/logs", "/app/cache"]

# ============================================================================
# ENTRYPOINT SCRIPT
# ============================================================================

# Create entrypoint script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Wait for dependencies\n\
echo "Waiting for Redis..."\n\
while ! nc -z redis 6379; do\n\
  sleep 1\n\
done\n\
\n\
echo "Waiting for PostgreSQL..."\n\
while ! nc -z postgres 5432; do\n\
  sleep 1\n\
done\n\
\n\
# Run database migrations\n\
echo "Running database migrations..."\n\
alembic upgrade head\n\
\n\
# Start the application\n\
echo "Starting Daily Noah Enterprise..."\n\
exec gunicorn server_enterprise:app \\\n\
    --bind 0.0.0.0:8000 \\\n\
    --workers $GUNICORN_WORKERS \\\n\
    --worker-class $GUNICORN_WORKER_CLASS \\\n\
    --worker-connections $GUNICORN_WORKER_CONNECTIONS \\\n\
    --max-requests $GUNICORN_MAX_REQUESTS \\\n\
    --max-requests-jitter $GUNICORN_MAX_REQUESTS_JITTER \\\n\
    --timeout $GUNICORN_TIMEOUT \\\n\
    --keep-alive $GUNICORN_KEEPALIVE \\\n\
    --access-logfile - \\\n\
    --error-logfile - \\\n\
    --log-level info\n\
' > /app/entrypoint.sh

# ============================================================================
# DOCKER COMPOSE INTEGRATION
# ============================================================================

# This Dockerfile is designed to work with docker-compose.enterprise.yml
# which includes Redis, PostgreSQL, and other enterprise services.

# ============================================================================
# BUILD INSTRUCTIONS
# ============================================================================

# Build the image:
# docker build -f Dockerfile.enterprise -t dailynoah/enterprise:latest .

# Run with docker-compose:
# docker-compose -f docker-compose.enterprise.yml up -d

# ============================================================================
# PRODUCTION DEPLOYMENT
# ============================================================================

# For production deployment:
# 1. Use specific version tags
# 2. Set all environment variables
# 3. Use secrets management
# 4. Enable monitoring
# 5. Set up logging aggregation
# 6. Configure backup strategies
# 7. Set up health checks
# 8. Use load balancers
# 9. Enable auto-scaling
# 10. Set up alerting
